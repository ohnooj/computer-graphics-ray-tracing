name: CMake Cross-compilation

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, macos-13, windows-latest]
        build_type: [Debug, Release]
        use_hw2lib: [true, false]

        # Which CMake generator to use per OS
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            apt: >-
              cmake
              build-essential
          - os: macos-14
            generator: "Unix Makefiles"
          - os: macos-13
            generator: "Unix Makefiles"
          - os: windows-latest
            generator: "Visual Studio 17 2022"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install packages (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt }}

      # Compute HW2LIB_DIR for this OS/config when enabled
      - name: Compute HW2LIB_DIR
        id: hw2
        shell: bash
        run: |
          if [[ "${{ matrix.use_hw2lib }}" == "true" ]]; then
            case "${{ matrix.os }}" in
              ubuntu-*) base="lib"; plat="linux" ;;
              macos-13)  base="lib"; plat="mac" ;;
              macos-14)  base="lib"; plat="mac-arm64" ;;
              windows-*) base="lib"; plat="win" ;;
            esac

            # map build_type into path segment
            if [[ "${{ matrix.build_type }}" == "Debug" ]]; then
              cfg="debug"
            else
              cfg="release"
            fi

            dir="${base}/${cfg}/${plat}"
            echo "dir=${dir}" >> "$GITHUB_OUTPUT"
            # Show contents to help catch wrong-arch/missing libs (non-fatal here)
            echo "Expecting HW2 lib at: $dir"
            
            if [[ ! -d "$dir" ]]; then
              echo "::error title=Missing HW2 Library::Directory $dir not found"
              exit 1
            fi
          else
            echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure
        shell: bash
        run: |
          # Build common CMake args
          EXTRA_ARGS=()
          if [[ -n "${{ steps.hw2.outputs.dir }}" ]]; then
            EXTRA_ARGS+=(-DHW2LIB_DIR="${{ steps.hw2.outputs.dir }}")
          fi

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake -S . -B build -G "${{ matrix.generator }}" -A x64 "${EXTRA_ARGS[@]}"
          else
            cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} "${EXTRA_ARGS[@]}"
          fi

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake --build build --config ${{ matrix.build_type }} --parallel
          else
            cmake --build build --parallel
          fi

      - name: Run binary (smoke)
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            exe="build/${{ matrix.build_type }}/raytracing.exe"
            "$exe"
          else
            ./build/raytracing
          fi

      - name: Upload binaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}-hw2=${{ matrix.use_hw2lib }}
          path: |
            build/**/*.exe
            build/**/raytracing
